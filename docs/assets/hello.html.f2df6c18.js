import{_ as s,r as e,o as t,c as o,a as p,b as l,w as c,e as i,d as n}from"./app.a952a5ca.js";const u={},d=i(`<h1 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world" aria-hidden="true">#</a> Hello World</h1><p>This article teaches you how to create and run a &quot;Hello World!&quot; .NET app.</p><h2 id="create-an-application" tabindex="-1"><a class="header-anchor" href="#create-an-application" aria-hidden="true">#</a> Create an application</h2><p>First, download and install the .NET SDK on your computer.</p><p>Next, open a terminal such as PowerShell, Command Prompt, or bash. Enter the following dotnet commands to create and run a C# application:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>dotnet new console <span class="token parameter variable">--output</span> sample
<span class="token builtin class-name">cd</span> sample
dotnet <span class="token function">add</span> package JinianNet.JNTemplate
notepad Program.cs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Open Program.cs\uFF1A</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">JinianNet<span class="token punctuation">.</span>JNTemplate</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">sample</span>
<span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Program</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> template <span class="token operator">=</span> Engine<span class="token punctuation">.</span><span class="token function">CreateTemplate</span><span class="token punctuation">(</span><span class="token string">&quot;Hello $name!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            template<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            template<span class="token punctuation">.</span><span class="token function">Render</span><span class="token punctuation">(</span>Console<span class="token punctuation">.</span>Out<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Saves and Run:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>dotnet run
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Output\uFF1A<code>Hello World!</code></p><p>Congratulations! You&#39;ve created a jntemplate application.</p><h2 id="next-steps" tabindex="-1"><a class="header-anchor" href="#next-steps" aria-hidden="true">#</a> Next steps</h2>`,13),r=n("For more usage \uFF0CSee "),m=n("Tag & Syntax"),k=n(" \u3002");function v(h,b){const a=e("RouterLink");return t(),o("div",null,[d,p("p",null,[r,l(a,{to:"/started/tags/tag.html"},{default:c(()=>[m]),_:1}),k])])}const _=s(u,[["render",v],["__file","hello.html.vue"]]);export{_ as default};
